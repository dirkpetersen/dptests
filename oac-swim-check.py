#! /usr/bin/env python3

# The swim lanes at Olympic Athletic Club in Seattle are 
# insanely busy and you need to reserve half hour slots
# through a website with CAPTCHA (sic!) but at least you 
# can use Selenium to check for slots becoming available
# and notify your WhatsApp group or user 

# Generated by Selenium IDE
#import pytest, json, time
import os, sys, hashlib, configparser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.firefox.options import Options
#from selenium.webdriver.chrome.options import Options
#from selenium.webdriver.common.action_chains import ActionChains
#from selenium.webdriver.support import expected_conditions
#from selenium.webdriver.common.keys import Keys
#from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# WhatsApp Group: OAC Swim Alert
WHATSAPP_GROUP_ID = "Kub9KMB0XXXXXXXXXXXX"

def main():
    print('checking OAC, please wait ...')
    text, html = check_web_table()
    print('OAC Reponse:', text)
    
    html = remove_line_if_word_found(html,'name="CSRFToken"')
    
    home = os.path.expanduser("~")
    file_path = os.path.join(home, ".oac.check.html")

    # Compute MD5 of table_html
    html_md5 = compute_md5(text)

    # Check if file exists and compare MD5
    write_file = True
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            file_content = file.read()
            file_md5 = compute_md5(file_content)            
            if file_md5 == html_md5:
                write_file = False
            else:
                print(f'New md5sum in {file_path} !')
    # If MD5s are different or file doesn't exist, write html to file
    if write_file:
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(text)
        if not "No available appointment times were found" in text:
            msg = 'New OAC Swim Slot(s):\n' + text
            print('Sending WhatsApp Message ...')
            if send_message(msg):
                print('WhatsApp Message sent successfully')    
    return True

def send_message(msg):

    cfg = os.path.expanduser('~/.config/oac-swim/twilio.ini')
    if not os.path.exists(cfg):
        try:
            print(f'Twilio config "{cfg}" does not exist, try pywhatkit')
            import pywhatkit
            pywhatkit.sendwhatmsg_to_group_instantly(WHATSAPP_GROUP_ID, msg)
            return True
        except Exception as e:
            print(f'Error: {e}')
            return False 

    config = configparser.ConfigParser()
    config.read(cfg)

    # Extract the desired values
    account_sid = config.get('DEFAULT', 'account_sid', fallback=None)
    auth_token = config.get('DEFAULT', 'auth_token', fallback=None)
    whatsapp_from = config.get('DEFAULT', 'whatsapp_from', fallback=None)
    whatsapp_to = config.get('DEFAULT', 'whatsapp_to', fallback=None)
    whatsapp_group_id = config.get('DEFAULT', 'whatsapp_group_id', fallback=None)

    import twilio.rest
    tclient = twilio.rest.Client(account_sid, auth_token)

    message = tclient.messages.create(
        from_=f'whatsapp:{whatsapp_from}',
        to=f'whatsapp:{whatsapp_to}',
        body=msg
    )
    print(f'Twilio message id sent: {message.sid}')
    
                   
def compute_md5(content):
    # Compute MD5 hash of given content
    m = hashlib.md5()
    m.update(content.encode('utf-8'))
    return m.hexdigest()
    
def remove_line_if_word_found(text, search_word):
    lines = text.split('\n')
    # Use a list comprehension to filter out lines that contain the search word
    filtered_lines = [line for line in lines if search_word not in line]
    return '\n'.join(filtered_lines)

def check_web_table():
    myoptions = Options()
    myoptions.add_argument("--headless") 
    #myoptions.add_argument('--disable-gpu')    
    #driver = webdriver.Chrome(options=myoptions)   
    myoptions.set_preference("network.proxy.type", 0)
    driver = webdriver.Firefox(options=myoptions)
    driver.get("https://clients.mindbodyonline.com/asp/main_appts.asp?studioid=156942")                
    wait = WebDriverWait(driver, 15)
    element = wait.until(EC.presence_of_element_located((By.ID, "tabA113")))        
    driver.find_element(By.ID, "tabA113").click()
    driver.find_element(By.LINK_TEXT, "30 minutes - Lap Swim").click()
    driver.find_element(By.NAME, "SearchButton").click()
    #self.driver.find_element(By.LINK_TEXT, "Book").click()
    #elem = self.driver.find_element(By.LINK_TEXT, "Book")
    #table = self.driver.find_element(By.CLASS_NAME, 'appointmentSearchResults')
    #table = driver.find_element(By.ID, 'table1')
    tables = driver.find_elements(By.CLASS_NAME, 'appointmentSearchResults')
    table_html = ''
    table_text = ''
    for table in tables:
        table_html += table.get_attribute('outerHTML')
        table_text += table.text + '\n'        
    driver.quit()
    #print(table_text)
    return table_text, table_html

if __name__ == "__main__":
    if main():
        sys.exit(0)
    else:
        sys.exit(1)
